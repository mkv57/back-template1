// Code generated by MockGen. DO NOT EDIT.
// Source: session.go
//
// Generated by this command:
//
//	mockgen -source=session.go -destination mock.app.contracts_test.go -package session_test
//
// Package session_test is a generated GoMock package.
package session_test

import (
	context "context"
	reflect "reflect"

	client "github.com/ZergsLaw/back-template1/cmd/session/client"
	dom "github.com/ZergsLaw/back-template1/internal/dom"
	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MocksessionClient is a mock of sessionClient interface.
type MocksessionClient struct {
	ctrl     *gomock.Controller
	recorder *MocksessionClientMockRecorder
}

// MocksessionClientMockRecorder is the mock recorder for MocksessionClient.
type MocksessionClientMockRecorder struct {
	mock *MocksessionClient
}

// NewMocksessionClient creates a new mock instance.
func NewMocksessionClient(ctrl *gomock.Controller) *MocksessionClient {
	mock := &MocksessionClient{ctrl: ctrl}
	mock.recorder = &MocksessionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksessionClient) EXPECT() *MocksessionClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MocksessionClient) Delete(ctx context.Context, sessionID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MocksessionClientMockRecorder) Delete(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MocksessionClient)(nil).Delete), ctx, sessionID)
}

// Get mocks base method.
func (m *MocksessionClient) Get(ctx context.Context, token string) (*client.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(*client.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MocksessionClientMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocksessionClient)(nil).Get), ctx, token)
}

// Save mocks base method.
func (m *MocksessionClient) Save(ctx context.Context, userID uuid.UUID, origin dom.Origin, status dom.UserStatus) (*client.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userID, origin, status)
	ret0, _ := ret[0].(*client.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MocksessionClientMockRecorder) Save(ctx, userID, origin, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MocksessionClient)(nil).Save), ctx, userID, origin, status)
}
